[core]
	excludesfile = ~/.gitignore # dotfiles hardlinked
	attributesfile = ~/.gitattributes # dotfiles hardlinked
	editor = vim
[user]
	name = Dustin Venegas
	email = dustin.venegas@gmail.com
[merge]
	conflictstyle = diff3
	tool = kdiff3
	guitool = kdiff3
[mergetool]
	prompt = false
[diff]
	tool = vimdiff
	guitool = kdiff3
[push]
	default = simple # Push a branch, assuming remote/local names match, to "origin"
[rerere]
	# Record, replay, resolve. Store manual resolutions
	enabled = true
	# Update the index after performing rerere actions
	autoUpdate = true
[remote "origin"]
	# Removes origin remotes that were deleted
	prune = true
[log]
	# Displays dates in ISO 8601 like format, for readability
	#    YYYY-MM-DD hh:mm:ss -0700
	date = iso-strict
[format]
	# Default git log format
	# https://stackoverflow.com/a/9463536
	#    Original: pretty = format:%C(auto,yellow)%h%C(auto,magenta)% G? %C(auto,blue)%>(12,trunc)%ad %C(auto,green)%<(7,trunc)%aN%C(auto,reset)%s%C(auto,red)% gD% D
	pretty = format:%C(auto,yellow)%h%C(auto,magenta)%  %C(auto,blue)%>(12,trunc)%ad %C(auto,green)%<(7,trunc)%aN%C(auto,reset)%s%C(auto,red)% gD% D
[pretty]
	# Named git log formats
	dotfiles = format:%C(auto,yellow)%h%C(auto,magenta)%  %C(auto,blue)%>(12,trunc)%ad %C(auto,green)%<(7,trunc)%aN%C(auto,reset)%s%C(auto,red)% gD% D
[alias]
	list-aliases = "!git config -l | grep alias | cut -c 7-"

	############
	# Utilities
	############
	# Intend the opposite of staging a file
	unstage = reset HEAD

	# Pull with rebase, pruning old commits after. Update all submodules.
	up = !git pull --rebase

	# Undo the last commit, adding the edits back to unstaged files
	uncommit = reset HEAD^ --mixed

	# Push to an upstream with some safety (upstream ref is expected)
	push-please = push --force-with-lease

	###################
	# Function aliases
	###################
	# Current branch name
	branch-name = "!git rev-parse --abbrev-ref HEAD"

	####################
	# Branch Management
	####################
	# Incoming and outgoing changesets
	incoming = "!(git fetch --quiet && git log ..@{upstream})"
	outgoing = "!(git fetch --quiet && git log @{upstream}..)"

	# Merge the current branch into master
	merge-into-master = !git checkout master && git merge @{-1}

	# Push the current branch to the remote "origin", and set it to track
	# the upstream branch
	publish = "!git push --set-upstream origin $(git branch-name)"

	# Delete the remote version of the current branch
	unpublish = "!git push origin :$(git branch-name)"

	# See all changes between current branch and master
	master-diff = difftool origin/master...

	# Delete any branches that have been merged into master
	# See also: https://gist.github.com/robmiller/5133264
	delete-merged-branches = "!git co master && git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# Branches/refs/heads with owner (last commiter)
	branch-owners = "!(git for-each-ref --format='%(committerdate) %09 %(authorname) %09 %(refname)' | sort -k5n -k2M -k3n -k4n)"

	#############
	# Logs
	#############
	# Show commit log using graph notation; consider params --all, -20, etc
	log-graph = log --graph --oneline --abbrev-commit

	# List commits showing changed files
	log-numstat = log --numstat

	# Log with statistics
	log-stat = log --stat

	# Remote branch heads or tagged
	log-relative-branches = "!git log --graph --all --decorate --simplify-by-decoration"

	#############
	# Aliases
	#############

	lg = !git log-graph
	ln = !git log-numstat
	ls = !git log-stat
	lrb = !git log-relative-branches

[include]
	# Git configuration for Operating System specific configuration
	path = .gitconfig_os

	# Local git configuration, to be created by the user on each machine, as desired
	path = .gitconfig_local

# Modeline or non-standard named .gitconfig
# vim:fileformat=unix filetype=.gitconfig
